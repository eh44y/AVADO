plugins {
  id 'java'
  id 'org.springframework.boot' version '3.1.4'
  id 'io.spring.dependency-management' version '1.1.3'
  id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.final'
version = '0.0.1-SNAPSHOT'

java {
  sourceCompatibility = '17'
}



repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  runtimeOnly 'com.h2database:h2'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  
  implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
  runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
  runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

  // Querydsl 추가
  implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
  annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
  annotationProcessor "jakarta.annotation:jakarta.annotation-api"
  annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-oauth2-client
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:3.1.4'

  // WebSocket
  implementation 'org.springframework.boot:spring-boot-starter-websocket'
  // sockjs
  implementation 'org.webjars:sockjs-client:1.5.1'
  // stomp
  implementation 'org.webjars:stomp-websocket:2.3.4'
  // gson
  implementation 'com.google.code.gson:gson:2.9.0'

  //jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.15.3'

}

tasks.named('test') {
  useJUnitPlatform()
}

// 아래 코드는 통합 build를 위한 코드

def reactDir = "$projectDir/src/main/webapp/frontend";


configurations {
    querydsl.extendsFrom compileClasspath
    compileOnly {
        extendsFrom annotationProcessor
    }
}

sourceSets {
    main.java.srcDir querydslDir
    main{
        resources{
            srcDirs = ["$projectDir/src/main/resources"]
        }
    }
}


processResources{
  dependsOn "copyReactBuildFiles"
}

task installReact(type:Exec){
  workingDir "$reactDir"
  inputs.dir "$reactDir"
  group = BasePlugin.BUILD_GROUP
  
  if(System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')){
    commandLine "npm.cmd", "audit", "fix"
    commandLine 'npm.cmd', 'install'
  }else{
    commandLine "npm", "audit", "fix"
    commandLine 'npm', 'install'
  }
}

task buildReact(type:Exec){
  dependsOn "installReact"
  workingDir "$reactDir"
  inputs.dir "$reactDir"
  group = BasePlugin.BUILD_GROUP
  
  if(System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')){
    commandLine "npm.cmd", "run-script", "build"
  }else{
    commandLine "npm", "run-script", "build"
  }
}

task copyReactBuildFiles(type:Copy){
  dependsOn "buildReact"
  from "$reactDir/build"
  into "$projectDir/src/main/resources/static"
}

// queryDSL 추가 : QueryDSL 빌드 옵션
def querydslDir = "$projectDir/src/generated/querydsl"

querydsl {
  jpa = true
  querydslSourcesDir = querydslDir
}


compileQuerydsl {
  options.annotationProcessorPath = configurations.querydsl
}
